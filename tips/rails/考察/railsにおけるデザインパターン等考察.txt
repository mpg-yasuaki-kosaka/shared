rails/rubyにおけるデザパタ
https://qiita.com/yuji_ariyasu/items/588fef6062b3c7149509#5%E7%AB%A0-%E5%A4%89%E6%9B%B4%E3%81%AB%E8%BF%BD%E5%BE%93%E3%81%99%E3%82%8B--observer

singleton　インスタンスを１つだけにする
・基本。クラスが多重になったりとか、あまり複雑にならないようには意識

Template 変わらない部分を親クラスに記述する。そして変わる部分を子クラスに書くことでカプセル化する。
・基本だが、クラスわけではなくてただメソッド分割するだけでいい。継承までするとわけわからなくなりがち

Strategy
Templateと考え方は同じで継承の代わりに委譲を使ったもの。
・考え方は非常に基本的で重要だが、Railsの実装として考えると…？う～ん

Observer
とある独自クラス(サービスクラス)を別のいろんなクラスから使えるようにする考え方と理解。
・バッチ用のサービスクラスなどでは結構ありがちかもしれない。
　ただ独自クラスという時点であまり使う機会があってほしくはない気がする。
　Observableクラスのincludeと一緒にダックタイピングのように使うか…複雑になりがち。

Composite
オブジェクトのコレクションをたった１つのオブジェクトのように扱う
・親クラスからみたhas_manyみたいなイメージ。親クラスで処理でいい

--

ポリモーフィック
・影響範囲が限定的な場合は良いが、大きい場合はコードを追えないのでカラムは分けるべき
・条件付きで別テーブルの情報とってくるカラムを作るのは普通。アソシエーションで用意に実装できる

--

継承
基本的に共通な処理は models/concerns に、単に切り出せる処理はmoduleとして書いたりするのであまり必要な場面がない。
書くのはだめではないが、コードリーディングが少し面倒くさくなるので特別理由がないならないほうが良い。

--
委譲 delegate
わざわざ実装する必要があるケースがないかも？コードリーディングが面倒くさくなるので特別理由がないならないほうが良い。
