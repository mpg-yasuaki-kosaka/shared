
vue

●難易度
・(あくまで本来は)学習コストが低くreactに比べてミニマムで導入できる（ミニマムで導入しやすい）FW
　→ なのでreactとvueどちらを導入するかだとvueにする場合が多くなってきている模様
・reactとvueの使い方の違いはvb.netとc#やobjective-cとswiftの違いと同じくらいに似ている

●うまい使い方
・ミニマムでの導入と部品化
　例）
　・マスタを参照するテキストボックスのコンポーネント化（部品化）
　・ボタンなどからモーダルを開く→入力→更新の動きをコンポーネント化
・コンポーネント指向と言われる部品化(js,css,htmlをセットにした部品化)を重視しており部品の使い回しが手軽に実現できる
　→これがうまくできるなら導入のメリットはある。逆に、ページ全体をvueの1ファイルにまとめて全部書くみたいなのはメリットが薄い
・実装済みのものをコンポーネント一覧画面などで共有できるとgood
・railsでは↓のような感じで、できるだけrailsの機能(scaffoldやviewへのmodelバインド)を残したままにするのが賢い使い方だと思われる
https://qiita.com/okmttdhr/items/58be840c3cc64c5ff460#2view%E3%81%AFrails%E3%81%ABpartial%E3%81%A8%E3%81%97%E3%81%A6%E3%81%A4%E3%81%8F%E3%82%8Acomponent%E3%81%AEjs%E3%81%A0%E3%81%91%E3%81%A4%E3%81%8F%E3%82%8B

●問題点
・普通のjsよりロジックがたくさん書かれる傾向にある。本来サーバーサイドやhtml/slimで足りる部分でも書かれやすい
・railsよりもレールがない（コーディング基準がない）のでよりその人流の記述になる。reactやbackboneでも同じ。
　また、実装方法によってはrailsのscaffoldやviewへのmodelバインドが使えなくなる。
・本来は学習コストの低いはずだが、こういったその人流の書き方がされることが多く逆に学習コスト（というかコードリーディングの難易度）が高くなりがち
・場合によってはAPI専用のサーバーを立てての運用になるため開発コストが増す
・開発環境が整備されていないとPATHやバージョン・依存関連でエラーが出たりしてハマる
・vueをフロントエンドに選ぶならjsのテストが必要(特にロジカルな部分に使う場合）。ただ、jsのtestはすごくめんどくさい(下記)。

●jsのtest
jestというテストツールがよく使われる。
・rspec以上に記述が独特（他人が書いたtestコードだとなおさら）
・testコード自体のデバッグがしにくい
・CIの構築がrspecに比べて手間
などコストが大きいので、jsは可能な限りサーバーサイドに寄せたり、画面での表現はhtml/cssにするか(フロントエンド専門のエンジニアがいないなら)bootstrapに頼る形で実装するのが良い。
また、フロントエンドFWを使っているのにjsのtestがないことはありえない。フロントエンドがめんどくさい理由の1つ
