
テストコード

●model spec
修正時のデグレ検知や他のバグ発生の検知が主なメリット、新規作成時点ではそこまでメリットはない。
自分一人だけで実装してメンテするような場合ならなくてもよいが、これがないと他人の作成したところの修正は怖い。

model specがなくて良いのはせいぜい2人まで。それ以上だとデグレ・同時リリースによる不具合が増え自転車操業になる。

●controler spec
画面が開けることなどルーティングが保証できる。ログインセッションも擬装するので、model specではできないような実際に画面を叩いた時に近い状態でのテストができ実行時エラーも拾える。
どちらかというと、APIサーバーを立てている場合によりメリットがある。APIサーバーがないなら書かないことも割とあるしコスパもそこまで高くはない

●feature spec
機能単位でのテストで、複数画面に渡るテストを書く。ログイン周りや複雑な機能のほか、他社API(ソーシャルログイン、カード決済など)を使っているなど重要な機能に使うことが多い

●jsのtest
jestというテストツールがよく使われる。
・rspec以上に記述が独特（他人が書いたtestコードだとなおさら）
・testコード自体のデバッグがしにくい
・CIの構築がrspecに比べて手間
などコストが大きいので、jsは可能な限りサーバーサイドに寄せたり、画面での表現はhtml/cssにするか(フロントエンド専門のエンジニアがいないなら)bootstrapに頼る形で実装するのが良い。
また、フロントエンドFWを使っているのにjsのtestがないことはありえない。フロントエンドがめんどくさい理由の1つ
